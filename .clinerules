# Roo Code への基本指示

## 重要

- 2 回以上連続でテストを失敗した時は現在の状況を整理してユーザーに解決方法を相談してください。
- 動作確認しつつユーザーに説明しながらコードを書いてください。
- コンテキストが不明瞭な場合はユーザーに質問してください。

## 作業開始準備

- `git status` で現在の git のコンテキストを確認してください。
- もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

## セキュリティ

### 機密ファイル

- 以下のファイルを読み取ったり変更したりしないこと
  - .env files
  - \*_/config/secrets._
  - \*_/_.pem
  - API keys, tokens, or credentials を含む全てのファイル

### 禁止事項

- 機密ファイルをコミットしないこと
- 機密情報は環境変数で記述すること
- 機密情報はログや出力に記載しないこと

## ガイドライン

- 機能変更時には /docs の関連ドキュメントを更新すること
- README.md を新しい機能と同期させること
- CHANGELOG.md の変更履歴エントリを維持すること

## アーキテクチャ決定記録

- ADR を /docs/adr に作成すること
  - 主な依存関係の変更
  - アーキテクチャパターンの変更
  - 新しい統合パターン
  - データベーススキーマの変更

## コーディングルール

### 原則

#### テスト駆動開発 (TDD)

- Red-Green-Refactor サイクル
- テストを仕様として扱う
- 小さな単位で反復する
- 継続的なリファクタリング
- ビジネスロジックに必要な単体テスト
- API エンドポイントの統合テスト
- 重要なユーザーフローに対する E2E テスト

#### ドメイン駆動設計 (DDD)

- 値オブジェクトとエンティティを区別
- リポジトリでデータアクセスを抽象化

### プラクティス

- 小さく始めて段階的に拡張
- 過度な抽象化を避ける
- コードよりも型を重視
- 複雑さに応じてアプローチを調整

### 実装パターン

#### 値オブジェクト

- 不変
- 値に基づく同一性

#### エンティティ

- ID に基づく同一性
- 制御された更新
- 整合性ルールを持つ
